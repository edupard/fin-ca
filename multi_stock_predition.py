from download_utils import download_data, load_npz_data, preprocess_data
from portfolio.multi_stock_env import Env, date_from_timestamp
from tickers import get_snp_tickers_exch_map
from portfolio.multi_stock_config import get_config
from portfolio.net_shiva import NetShiva
import datetime
import numpy as np
import csv
import os


def ib_convert_ticker(ticker):
    ticker = ticker.replace('-', ' ')
    ticker = ticker.replace('.', ' ')
    return ticker


# YYYY-MM-DD
PREDICTION_T_MINUS_ONE = datetime.datetime.strptime('2017-10-26', '%Y-%m-%d').date()
PREDICTION_T_MINUS_WEEK = datetime.datetime.strptime('2017-10-20', '%Y-%m-%d').date()

PREDICTION_DATE = datetime.datetime.strptime('2017-10-27', '%Y-%m-%d').date()
OPEN_POS_DATE = datetime.datetime.strptime('2017-10-27', '%Y-%m-%d').date()
HPR_DATE = datetime.datetime.strptime('2017-10-27', '%Y-%m-%d').date()

START_DATE = PREDICTION_DATE - datetime.timedelta(days=365)
END_DATE = HPR_DATE

tickers = [
'A',
'AAL',
'AAP',
'AAPL',
'ABBV',
'ABC',
'ABT',
'ACN',
'ADBE',
'ADI',
'ADM',
'ADP',
'ADS',
'ADSK',
'AEE',
'AEP',
'AES',
'AET',
'AFL',
'AGN',
'AIG',
'AIV',
'AIZ',
'AJG',
'AKAM',
'ALB',
'ALGN',
'ALK',
'ALL',
'ALLE',
'ALXN',
'AMAT',
'AMD',
'AME',
'AMG',
'AMGN',
'AMP',
'AMT',
'AMZN',
'ANDV',
'ANSS',
'ANTM',
'AON',
'AOS',
'APA',
'APC',
'APD',
'APH',
'ARE',
'ARNC',
'ATVI',
'AVB',
'AVGO',
'AVY',
'AWK',
'AXP',
'AYI',
'AZO',
'BA',
'BAC',
'BAX',
'BBT',
'BBY',
'BCR',
'BDX',
'BEN',
'BF-B',
'BHGE',
'BIIB',
'BK',
'BLK',
'BLL',
'BMY',
'BRK-B',
'BSX',
'BWA',
'BXP',
'C',
'CA',
'CAG',
'CAH',
'CAT',
'CB',
'CBG',
'CBOE',
'CBS',
'CCI',
'CCL',
'CELG',
'CERN',
'CF',
'CFG',
'CHD',
'CHK',
'CHRW',
'CHTR',
'CI',
'CINF',
'CL',
'CLX',
'CMA',
'CMCSA',
'CME',
'CMG',
'CMI',
'CMS',
'CNC',
'CNP',
'COF',
'COG',
'COH',
'COL',
'COO',
'COP',
'COST',
'COTY',
'CPB',
'CRM',
'CSCO',
'CSRA',
'CSX',
'CTAS',
'CTL',
'CTSH',
'CTXS',
'CVS',
'CVX',
'CXO',
'D',
'DAL',
'DE',
'DFS',
'DG',
'DGX',
'DHI',
'DHR',
'DIS',
'DISCA',
'DISCK',
'DISH',
'DLPH',
'DLR',
'DLTR',
'DOV',
'DOW',
'DPS',
'DRE',
'DRI',
'DTE',
'DUK',
'DVA',
'DVN',
'DXC',
'EA',
'EBAY',
'ECL',
'ED',
'EFX',
'EIX',
'EL',
'EMN',
'EMR',
'EOG',
'EQIX',
'EQR',
'EQT',
'ES',
'ESRX',
'ESS',
'ETFC',
'ETN',
'ETR',
'EVHC',
'EW',
'EXC',
'EXPD',
'EXPE',
'EXR',
'F',
'FAST',
'FB',
'FBHS',
'FCX',
'FDX',
'FE',
'FFIV',
'FIS',
'FISV',
'FITB',
'FL',
'FLIR',
'FLR',
'FLS',
'FMC',
'FOX',
'FOXA',
'FRT',
'FTI',
'FTV',
'GD',
'GE',
'GGP',
'GILD',
'GIS',
'GLW',
'GM',
'GOOG',
'GOOGL',
'GPC',
'GPN',
'GPS',
'GRMN',
'GS',
'GT',
'GWW',
'HAL',
'HAS',
'HBAN',
'HBI',
'HCA',
'HCN',
'HCP',
'HD',
'HES',
'HIG',
'HLT',
'HOG',
'HOLX',
'HON',
'HP',
'HPE',
'HPQ',
'HRB',
'HRL',
'HRS',
'HSIC',
'HST',
'HSY',
'HUM',
'IBM',
'ICE',
'IDXX',
'IFF',
'ILMN',
'INCY',
'INFO',
'INTC',
'INTU',
'IP',
'IPG',
'IR',
'IRM',
'ISRG',
'IT',
'ITW',
'IVZ',
'JBHT',
'JCI',
'JEC',
'JNJ',
'JNPR',
'JPM',
'JWN',
'K',
'KEY',
'KHC',
'KIM',
'KLAC',
'KMB',
'KMI',
'KMX',
'KO',
'KORS',
'KR',
'KSS',
'KSU',
'L',
'LB',
'LEG',
'LEN',
'LH',
'LKQ',
'LLL',
'LLY',
'LMT',
'LNC',
'LNT',
'LOW',
'LRCX',
'LUK',
'LUV',
'LVLT',
'LYB',
'M',
'MA',
'MAA',
'MAC',
'MAR',
'MAS',
'MAT',
'MCD',
'MCHP',
'MCK',
'MCO',
'MDLZ',
'MDT',
'MET',
'MHK',
'MKC',
'MLM',
'MMC',
'MMM',
'MNST',
'MO',
'MON',
'MOS',
'MPC',
'MRK',
'MRO',
'MS',
'MSFT',
'MSI',
'MTB',
'MTD',
'MU',
'MYL',
'NAVI',
'NBL',
'NDAQ',
'NEE',
'NEM',
'NFLX',
'NFX',
'NI',
'NKE',
'NLSN',
'NOC',
'NOV',
'NRG',
'NSC',
'NTAP',
'NTRS',
'NUE',
'NVDA',
'NWL',
'NWS',
'NWSA',
'O',
'OKE',
'OMC',
'ORCL',
'ORLY',
'OXY',
'PAYX',
'PBCT',
'PCAR',
'PCG',
'PCLN',
'PDCO',
'PEG',
'PEP',
'PFE',
'PFG',
'PG',
'PGR',
'PH',
'PHM',
'PKI',
'PLD',
'PM',
'PNC',
'PNR',
'PNW',
'PPG',
'PPL',
'PRGO',
'PRU',
'PSA',
'PSX',
'PVH',
'PWR',
'PX',
'PXD',
'PYPL',
'QCOM',
'QRVO',
'RCL',
'RE',
'REG',
'REGN',
'RF',
'RHI',
'RHT',
'RJF',
'RL',
'ROK',
'ROP',
'ROST',
'RRC',
'RSG',
'RTN',
'SBUX',
'SCG',
'SCHW',
'SEE',
'SHW',
'SIG',
'SJM',
'SLB',
'SLG',
'SNA',
'SNI',
'SNPS',
'SO',
'SPG',
'SPGI',
'SPLS',
'SRCL',
'SRE',
'STI',
'STT',
'STX',
'STZ',
'SWK',
'SWKS',
'SYF',
'SYK',
'SYMC',
'SYY',
'T',
'TAP',
'TDG',
'TEL',
'TGT',
'TIF',
'TJX',
'TMK',
'TMO',
'TRIP',
'TROW',
'TRV',
'TSCO',
'TSN',
'TSS',
'TWX',
'TXN',
'TXT',
'UA',
'UAA',
'UAL',
'UDR',
'UHS',
'ULTA',
'UNH',
'UNM',
'UNP',
'UPS',
'URI',
'USB',
'UTX',
'V',
'VAR',
'VFC',
'VIAB',
'VLO',
'VMC',
'VNO',
'VRSK',
'VRSN',
'VRTX',
'VTR',
'VZ',
'WAT',
'WBA',
'WDC',
'WEC',
'WFC',
'WHR',
'WLTW',
'WM',
'WMB',
'WMT',
'WRK',
'WU',
'WY',
'WYN',
'WYNN',
'XEC',
'XEL',
'XL',
'XLNX',
'XOM',
'XRAY',
'XRX',
'XYL',
'YUM',
'ZBH',
'ZION',
'ZTS',
'Q',
'BHF',
'RMD',
'PKG',
'MGM',
]

get_config().PREDICTION_MODE = True


def create_folders():
    if not os.path.exists(get_config().DATA_FOLDER_PATH):
        os.makedirs(get_config().DATA_FOLDER_PATH)


ticker_exch_map = get_snp_tickers_exch_map()


def get_net_data(env, BEG, END):
    beg_idx, end_idx = env.get_data_idxs_range(BEG, END)

    raw_dates = env.get_raw_dates(beg_idx, end_idx)
    input = env.get_input(beg_idx, end_idx)
    px = env.get_adj_close_px(beg_idx, end_idx)
    tradeable_mask = env.get_tradeable_mask(beg_idx, end_idx)

    raw_week_days = np.full(raw_dates.shape, 0, dtype=np.int32)
    for i in range(raw_dates.shape[0]):
        date = date_from_timestamp(raw_dates[i])
        raw_week_days[i] = date.isoweekday()

    return beg_idx, end_idx, raw_dates, raw_week_days, tradeable_mask, px, input


def get_csv_date_string(date):
    return date.strftime('%Y-%m-%d')


CSV_ONE_WEEK_DATE = get_csv_date_string(PREDICTION_T_MINUS_WEEK)
CSV_ONE_DAY_DATE = get_csv_date_string(PREDICTION_T_MINUS_ONE)
CSV_PREDICATION_DATE = get_csv_date_string(PREDICTION_DATE)
CSV_HPR_DATE = get_csv_date_string(HPR_DATE)
CSV_OPEN_POS_DATE = get_csv_date_string(OPEN_POS_DATE)

net = NetShiva()

with open('./data/prediction.csv', 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(
        ('ticker', 'exchange', 'long prob', 'class', '1w', '1d', '*', '#', 'hp', '1w px', '1d px', '* px', '# px',
         'hp px',
         '1wr pct', '1dr pct',
         'hpr pct', '1d v', '1w avg v'))

    idx = 0
    for ticker in tickers:
        print("Processing %s" % ticker)
        get_config().TICKER = ticker
        get_config().reload()
        create_folders()
        _tickers = [ticker]
        download_data(_tickers,
                      get_config().DATA_PATH,
                      START_DATE,
                      END_DATE)
        preprocess_data(_tickers,
                        get_config().DATA_PATH,
                        START_DATE,
                        END_DATE,
                        get_config().DATA_NPZ_PATH,
                        get_config().DATA_FEATURES)
        env = Env()
        beg_idx, end_idx, raw_dates, raw_week_days, tradeable_mask, px, input = get_net_data(env, START_DATE,
                                                                                             PREDICTION_DATE)
        ds_size = end_idx - beg_idx + 1
        net.load_weights(get_config().WEIGHTS_PATH, get_config().MAX_EPOCH)
        state = net.zero_state(1)

        _input = input
        _labels = np.zeros((1, ds_size))
        _mask = np.zeros((1, ds_size))
        state, loss, predictions = net.eval(state, _input, _labels, _mask)

        pred_ret = predictions[0, -1, 0]

        _1d_data_idx = env.get_data_idx(PREDICTION_T_MINUS_ONE)
        _1w_data_idx = env.get_data_idx(PREDICTION_T_MINUS_WEEK)
        _pred_data_idx = env.get_data_idx(PREDICTION_DATE)
        _hpr_data_idx = env.get_data_idx(HPR_DATE)
        _open_pos_data_idx = env.get_data_idx(OPEN_POS_DATE)


        def get_adj_close_px(data_idx):
            return env.get_adj_close_px(data_idx, data_idx)[0, 0]


        _1w_px = get_adj_close_px(_1w_data_idx)
        _1d_px = get_adj_close_px(_1d_data_idx)
        _pred_px = get_adj_close_px(_pred_data_idx)
        _hp_px = get_adj_close_px(_hpr_data_idx)
        _open_px = get_adj_close_px(_open_pos_data_idx)


        # _week_gross_volume = raw_data[ticker_idx, d_r_i[1:], DATA_TO_IDX]
        # _last_day_gross_volume = _week_gross_volume[4]
        # _week_avg_gross_volume = np.average(_week_gross_volume)


        def get_pct(enter_px, exit_px):
            return (exit_px - enter_px) / enter_px


        _1wr_pct = get_pct(_1w_px, _pred_px)
        _1dr_pct = get_pct(_1d_px, _pred_px)
        _hpr_pct = get_pct(_open_px, _hp_px)

        writer.writerow((ib_convert_ticker(ticker),
                         ticker_exch_map[ticker],
                         pred_ret,
                         'L' if pred_ret > 0 else 'S',
                         CSV_ONE_WEEK_DATE,
                         CSV_ONE_DAY_DATE,
                         CSV_PREDICATION_DATE,
                         CSV_OPEN_POS_DATE,
                         CSV_HPR_DATE,
                         _1w_px,
                         _1d_px,
                         _pred_px,
                         _open_px,
                         _hp_px,
                         _1wr_pct,
                         _1dr_pct,
                         _hpr_pct,
                         0,
                         0
                         ))

        idx += 1
